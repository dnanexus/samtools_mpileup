#!/usr/bin/env python
# bwa_mem_filter test suite
# Generated by dx-app-wizard.

import json, os, time, unittest

import dxpy
import dxpy.app_builder
from uuid import uuid4
from dxpy.exceptions import DXAPIError

src_dir = os.path.join(os.path.dirname(__file__), "..")
test_resources_dir = os.path.join(src_dir, "test", "resources")
COMPARE_OBJ_DXAPPLET = dxpy.DXApplet('applet-F6qF4Fj0xG8k75PJ0BBq6g23')
DX_PROJECT_ID = dxpy.PROJECT_CONTEXT_ID
PROJECT_DX = dxpy.DXProject(DX_PROJECT_ID)


def makeInputs():
    # Please fill in this method to generate default inputs for your app.
    return {
        "percent_identity": 90,
        "read_group_library": "1",
        "genomeindex_targz": {
            "$dnanexus_link": "file-F46J45004Q8FbZ224KvK4F72"
        },
        "mark_as_secondary": True,
        "read_group_platform": "ILLUMINA",
        "read_group_sample": "1",
        "reads2_fastqgz": {
            "$dnanexus_link": {
                "field": "reverse_fastagz",
                "analysis": "analysis-F6ZpbPj079KxP80V3JGB7Fqv",
                "stage": "stage-F3z6Kx8079KvX27X0vV3G5B9"
            }
        },
        "reads_fastqgz": {
            "$dnanexus_link": {
                "field": "forward_fastagz",
                "analysis": "analysis-F6ZpbPj079KxP80V3JGB7Fqv",
                "stage": "stage-F3z6Kx8079KvX27X0vV3G5B9"
            }
        },
        "add_read_group": True,
        "read_group_id": {
            "$dnanexus_link": {
                "input": "reads_fastqgz",
                "metadata": "name"
            }
        },
        "read_group_platform_unit": "None"
    }


class Testbwa_mem_filter(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # Upload the app to the Platform.
        cls.base_input = makeInputs()
        bundled_resources = dxpy.app_builder.upload_resources(src_dir)
        try:
            app_name = os.path.basename(os.path.abspath(src_dir)) + "_test"
        except OSError:
            app_name = "test_bwa_filter_app"
        applet_basename = app_name + "_" + str(int(time.time()))
        cls.applet_id, _ignored_applet_spec = dxpy.app_builder.upload_applet(
            src_dir, bundled_resources, override_name=applet_basename, project=DX_PROJECT_ID)

    @classmethod
    def tearDownClass(cls):
        # Clean up by removing the app we created.
        try:
            dxpy.api.container_remove_objects(dxpy.WORKSPACE_ID, {"objects": [cls.applet_id]})
        except DXAPIError as e:
            print "Error removing %s during cleanup; ignoring." % (cls.applet_id,)
            print e

    def setUp(self):
        # Make tempdir for outputs
        self.tempdir_dx = '/BWA_MEM_filter_{}'.format(str(uuid4()))
        PROJECT_DX.new_folder(folder=self.tempdir_dx, parents=True)

    def tearDown(self):
        pass

    def test_base_input(self):
        """
        Tests the app with a basic input.
        """
        def job_wait(jobdx):
            try:
                jobdx.wait_on_done(interval=10)
            except dxpy.exceptions.DXJobFailureError:
                return False
            return True

        expected_removallist = "file-F6q5G700YBXZ8fKF9qgF65vV"
        job = dxpy.DXApplet(self.applet_id).run(self.base_input, folder='/BWAMEM_test')
        print "Waiting for %s to complete" % (job.get_id(),)
        job.wait_on_done()
        # Compare Outputs
        actual_removallist = job.describe()['output']['removal_list']['$dnanexus_link']
        removal_list_comparison = COMPARE_OBJ_DXAPPLET.run(
            {'obj1': expected_removallist, 'obj2': actual_removallist})
        self.assertTrue(job_wait(removal_list_comparison), "Comparisons failed. Review logs.")
        PROJECT_DX.remove_folder(folder=self.tempdir_dx, recurse=True)


if __name__ == '__main__':
    unittest.main()
