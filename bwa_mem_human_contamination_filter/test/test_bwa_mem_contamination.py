#!/usr/bin/env python
# BWA_MEM_CONTAMINATION_FILTER DX_APP_WIZARD_VERSION test suite
# Generated by dx-app-wizard.

import os
import time
import unittest

import dxpy
import dxpy.app_builder

from dxpy.exceptions import DXAPIError
from uuid import uuid4

src_dir = os.path.join(os.path.dirname(__file__), "..")
test_resources_dir = os.path.join(src_dir, "test", "resources")

DX_PROJECT_ID = "project-BzQf6k80V3bJk7x0yv6z82j7"  # dxpy.PROJECT_CONTEXT_ID
PROJECT_DX = dxpy.DXProject(DX_PROJECT_ID)
FASTQ_FILTER_VALIDATION_APPLET = dxpy.DXApplet("applet-F7132P80V3b6fFqb818gF22F")

HUMAN_SAMPLE_CRITERIA = {
    "expected_filter_rate": "0.0019",
    "max_filter": "0.03",
    "tolerance": ".05",
    "ori_fastq": {"$dnanexus_link": "file-F4XPqxj079KyjP158XXF4qXy"},
    "ori_fastq2": {"$dnanexus_link": "file-F4XQ180079Kp7Fx6GY3j9GFz"}}

MICROBE_SAMPLE_CRITERIA = {
    "expected_filter_rate": "0.999964",
    "max_filter": "120",
    "tolerance": ".005",
    "ori_fastq": {"$dnanexus_link": "file-F4887VQ00pv8x28x57VjQZp4"},
    "ori_fastq2": {"$dnanexus_link": "file-F4887V800pv45zVBJkZ9JB03"}}


def makeInputs():
    # Please fill in this method to generate default inputs for your app.
    return {
        "percent_identity": 90,
        "read_group_library": "1",
        "genomeindex_targz": {
            "$dnanexus_link": "file-BFBy4G805pXZKqV1ZVGQ0FG8"
        },
        "mark_as_secondary": True,
        "read_group_platform": "ILLUMINA",
        "read_group_sample": "1",
        "add_read_group": True,
        "read_group_platform_unit": "None",
        "read_group_id": "just_testing.gz"
    }


class TestBWA_MEM_CONTAMINATION_FILTER(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # Upload the app to the Platform.
        bundled_resources = dxpy.app_builder.upload_resources(src_dir)
        try:
            app_name = os.path.basename(os.path.abspath(src_dir)) + "_test"
        except OSError:
            app_name = "test_app"
        applet_basename = app_name + "_" + str(int(time.time()))
        cls.applet_id, _ignored_applet_spec = dxpy.app_builder.upload_applet(src_dir, bundled_resources, override_name=applet_basename)

    @classmethod
    def tearDownClass(cls):
        # Clean up by removing the app we created.
        try:
            dxpy.api.container_remove_objects(dxpy.WORKSPACE_ID, {"objects": [cls.applet_id]})
        except DXAPIError as e:
            print "Error removing %s during cleanup; ignoring." % (cls.applet_id,)
            print e

    def setUp(self):
        self.base_input = makeInputs()
        self.tempdir_dx = '/BWAMEM_test/run_{}'.format(str(uuid4()))
        PROJECT_DX.new_folder(folder=self.tempdir_dx, parents=True)

    def tearDown(self):
        PROJECT_DX.remove_folder(folder=self.tempdir_dx, recurse=True)

    def test_human_filtering(self):
        """
        Tests the app with a basic input.
        """
        test_input = {
            "reads_fastqgz": {"$dnanexus_link": "file-F4XPqxj079KyjP158XXF4qXy"},
            "reads2_fastqgz": {"$dnanexus_link": "file-F4XQ180079Kp7Fx6GY3j9GFz"}
        }
        self.base_input.update(test_input)
        job = dxpy.DXApplet(self.applet_id).run(self.base_input, folder=self.tempdir_dx, name="BWA MEM Human read filtering")

        print "Waiting for %s to complete" % (job.get_id(),)
        job.wait_on_done()
        validate_inputs = {
            "new_fastq": job.get_output_ref("reads_out_fastqgz"),
            "new_fastq2": job.get_output_ref("reads2_out_fastqgz"),
        }
        validate_inputs.update(HUMAN_SAMPLE_CRITERIA)
        validate_job = FASTQ_FILTER_VALIDATION_APPLET.run(validate_inputs)
        try:
            validate_job.wait_on_done()
        except dxpy.exceptions.DXJobFailureError:
            self.fail("Filter criteria not met. Review {} for details".format(validate_job.get_id()))

    def test_microbe_filtering(self):
        """
        Tests the app with a basic input.
        """
        test_input = {
            "reads_fastqgz": {"$dnanexus_link": "file-F4887VQ00pv8x28x57VjQZp4"},
            "reads2_fastqgz": {"$dnanexus_link": "file-F4887V800pv45zVBJkZ9JB03"}
        }
        self.base_input.update(test_input)
        job = dxpy.DXApplet(self.applet_id).run(self.base_input, folder=self.tempdir_dx, name="BWA MEM Microbe read filtering")

        print "Waiting for %s to complete" % (job.get_id(),)
        job.wait_on_done()
        validate_inputs = {
            "new_fastq": job.get_output_ref("reads_out_fastqgz"),
            "new_fastq2": job.get_output_ref("reads2_out_fastqgz"),
        }
        validate_inputs.update(MICROBE_SAMPLE_CRITERIA)
        validate_job = FASTQ_FILTER_VALIDATION_APPLET.run(validate_inputs)
        try:
            validate_job.wait_on_done()
        except dxpy.exceptions.DXJobFailureError:
            self.fail("Filter criteria not met. Review {} for details".format(validate_job.get_id()))


if __name__ == '__main__':
    unittest.main()
